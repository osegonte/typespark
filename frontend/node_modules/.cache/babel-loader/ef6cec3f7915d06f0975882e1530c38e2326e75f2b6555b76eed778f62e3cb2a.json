{"ast":null,"code":"// Stats storage service using localStorage\nconst STORAGE_KEY = 'typespark_stats';\nconst SESSIONS_KEY = 'typespark_sessions';\n\n// Get or initialize stats\nconst getStats = () => {\n  const stats = localStorage.getItem(STORAGE_KEY);\n  if (stats) {\n    return JSON.parse(stats);\n  }\n\n  // Default stats\n  return {\n    averageWpm: 0,\n    accuracy: 0,\n    practiceTime: 0,\n    currentStreak: 0,\n    lastPracticeDate: null,\n    totalItems: 0\n  };\n};\n\n// Get or initialize sessions\nconst getSessions = () => {\n  const sessions = localStorage.getItem(SESSIONS_KEY);\n  if (sessions) {\n    return JSON.parse(sessions);\n  }\n  return [];\n};\n\n// Save stats\nconst saveStats = stats => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(stats));\n};\n\n// Save sessions\nconst saveSessions = sessions => {\n  localStorage.setItem(SESSIONS_KEY, JSON.stringify(sessions));\n};\n\n// Record a new practice session\nconst recordSession = session => {\n  // Get current stats and sessions\n  const stats = getStats();\n  const sessions = getSessions();\n\n  // Add the new session\n  sessions.unshift(session); // Add to beginning of array\n\n  // Keep only the last 20 sessions\n  if (sessions.length > 20) {\n    sessions.length = 20;\n  }\n\n  // Update stats\n  const totalSessions = sessions.length;\n  if (totalSessions > 0) {\n    stats.averageWpm = sessions.reduce((sum, s) => sum + s.wpm, 0) / totalSessions;\n    stats.accuracy = sessions.reduce((sum, s) => sum + s.accuracy, 0) / totalSessions;\n    stats.practiceTime += session.duration / 60; // Convert seconds to minutes\n    stats.totalItems += session.items || 0;\n\n    // Update streak\n    const today = new Date().toDateString();\n    const lastDate = stats.lastPracticeDate;\n    if (lastDate) {\n      // Convert to Date objects for comparison\n      const lastDay = new Date(lastDate).toDateString();\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayString = yesterday.toDateString();\n      if (today === lastDay) {\n        // Already practiced today, streak unchanged\n      } else if (yesterdayString === lastDay) {\n        // Practiced yesterday, streak continues\n        stats.currentStreak += 1;\n      } else {\n        // Streak broken\n        stats.currentStreak = 1;\n      }\n    } else {\n      // First practice\n      stats.currentStreak = 1;\n    }\n    stats.lastPracticeDate = today;\n  }\n\n  // Save updated data\n  saveStats(stats);\n  saveSessions(sessions);\n  return {\n    stats,\n    sessions\n  };\n};\nconst statsStorage = {\n  getStats,\n  getSessions,\n  recordSession\n};\nexport default statsStorage;","map":{"version":3,"names":["STORAGE_KEY","SESSIONS_KEY","getStats","stats","localStorage","getItem","JSON","parse","averageWpm","accuracy","practiceTime","currentStreak","lastPracticeDate","totalItems","getSessions","sessions","saveStats","setItem","stringify","saveSessions","recordSession","session","unshift","length","totalSessions","reduce","sum","s","wpm","duration","items","today","Date","toDateString","lastDate","lastDay","yesterday","setDate","getDate","yesterdayString","statsStorage"],"sources":["/Users/osegonte/typespark/frontend/src/services/statsStorage.js"],"sourcesContent":["// Stats storage service using localStorage\nconst STORAGE_KEY = 'typespark_stats';\nconst SESSIONS_KEY = 'typespark_sessions';\n\n// Get or initialize stats\nconst getStats = () => {\n  const stats = localStorage.getItem(STORAGE_KEY);\n  if (stats) {\n    return JSON.parse(stats);\n  }\n  \n  // Default stats\n  return {\n    averageWpm: 0,\n    accuracy: 0,\n    practiceTime: 0,\n    currentStreak: 0,\n    lastPracticeDate: null,\n    totalItems: 0\n  };\n};\n\n// Get or initialize sessions\nconst getSessions = () => {\n  const sessions = localStorage.getItem(SESSIONS_KEY);\n  if (sessions) {\n    return JSON.parse(sessions);\n  }\n  \n  return [];\n};\n\n// Save stats\nconst saveStats = (stats) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(stats));\n};\n\n// Save sessions\nconst saveSessions = (sessions) => {\n  localStorage.setItem(SESSIONS_KEY, JSON.stringify(sessions));\n};\n\n// Record a new practice session\nconst recordSession = (session) => {\n  // Get current stats and sessions\n  const stats = getStats();\n  const sessions = getSessions();\n  \n  // Add the new session\n  sessions.unshift(session); // Add to beginning of array\n  \n  // Keep only the last 20 sessions\n  if (sessions.length > 20) {\n    sessions.length = 20;\n  }\n  \n  // Update stats\n  const totalSessions = sessions.length;\n  if (totalSessions > 0) {\n    stats.averageWpm = sessions.reduce((sum, s) => sum + s.wpm, 0) / totalSessions;\n    stats.accuracy = sessions.reduce((sum, s) => sum + s.accuracy, 0) / totalSessions;\n    stats.practiceTime += session.duration / 60; // Convert seconds to minutes\n    stats.totalItems += session.items || 0;\n    \n    // Update streak\n    const today = new Date().toDateString();\n    const lastDate = stats.lastPracticeDate;\n    \n    if (lastDate) {\n      // Convert to Date objects for comparison\n      const lastDay = new Date(lastDate).toDateString();\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayString = yesterday.toDateString();\n      \n      if (today === lastDay) {\n        // Already practiced today, streak unchanged\n      } else if (yesterdayString === lastDay) {\n        // Practiced yesterday, streak continues\n        stats.currentStreak += 1;\n      } else {\n        // Streak broken\n        stats.currentStreak = 1;\n      }\n    } else {\n      // First practice\n      stats.currentStreak = 1;\n    }\n    \n    stats.lastPracticeDate = today;\n  }\n  \n  // Save updated data\n  saveStats(stats);\n  saveSessions(sessions);\n  \n  return { stats, sessions };\n};\n\nconst statsStorage = {\n  getStats,\n  getSessions,\n  recordSession\n};\n\nexport default statsStorage;"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG,iBAAiB;AACrC,MAAMC,YAAY,GAAG,oBAAoB;;AAEzC;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACL,WAAW,CAAC;EAC/C,IAAIG,KAAK,EAAE;IACT,OAAOG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC;EAC1B;;EAEA;EACA,OAAO;IACLK,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE,CAAC;IACXC,YAAY,EAAE,CAAC;IACfC,aAAa,EAAE,CAAC;IAChBC,gBAAgB,EAAE,IAAI;IACtBC,UAAU,EAAE;EACd,CAAC;AACH,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB,MAAMC,QAAQ,GAAGX,YAAY,CAACC,OAAO,CAACJ,YAAY,CAAC;EACnD,IAAIc,QAAQ,EAAE;IACZ,OAAOT,IAAI,CAACC,KAAK,CAACQ,QAAQ,CAAC;EAC7B;EAEA,OAAO,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,SAAS,GAAIb,KAAK,IAAK;EAC3BC,YAAY,CAACa,OAAO,CAACjB,WAAW,EAAEM,IAAI,CAACY,SAAS,CAACf,KAAK,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,MAAMgB,YAAY,GAAIJ,QAAQ,IAAK;EACjCX,YAAY,CAACa,OAAO,CAAChB,YAAY,EAAEK,IAAI,CAACY,SAAS,CAACH,QAAQ,CAAC,CAAC;AAC9D,CAAC;;AAED;AACA,MAAMK,aAAa,GAAIC,OAAO,IAAK;EACjC;EACA,MAAMlB,KAAK,GAAGD,QAAQ,CAAC,CAAC;EACxB,MAAMa,QAAQ,GAAGD,WAAW,CAAC,CAAC;;EAE9B;EACAC,QAAQ,CAACO,OAAO,CAACD,OAAO,CAAC,CAAC,CAAC;;EAE3B;EACA,IAAIN,QAAQ,CAACQ,MAAM,GAAG,EAAE,EAAE;IACxBR,QAAQ,CAACQ,MAAM,GAAG,EAAE;EACtB;;EAEA;EACA,MAAMC,aAAa,GAAGT,QAAQ,CAACQ,MAAM;EACrC,IAAIC,aAAa,GAAG,CAAC,EAAE;IACrBrB,KAAK,CAACK,UAAU,GAAGO,QAAQ,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAACC,GAAG,EAAE,CAAC,CAAC,GAAGJ,aAAa;IAC9ErB,KAAK,CAACM,QAAQ,GAAGM,QAAQ,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAAClB,QAAQ,EAAE,CAAC,CAAC,GAAGe,aAAa;IACjFrB,KAAK,CAACO,YAAY,IAAIW,OAAO,CAACQ,QAAQ,GAAG,EAAE,CAAC,CAAC;IAC7C1B,KAAK,CAACU,UAAU,IAAIQ,OAAO,CAACS,KAAK,IAAI,CAAC;;IAEtC;IACA,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC;IACvC,MAAMC,QAAQ,GAAG/B,KAAK,CAACS,gBAAgB;IAEvC,IAAIsB,QAAQ,EAAE;MACZ;MACA,MAAMC,OAAO,GAAG,IAAIH,IAAI,CAACE,QAAQ,CAAC,CAACD,YAAY,CAAC,CAAC;MACjD,MAAMG,SAAS,GAAG,IAAIJ,IAAI,CAAC,CAAC;MAC5BI,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAC1C,MAAMC,eAAe,GAAGH,SAAS,CAACH,YAAY,CAAC,CAAC;MAEhD,IAAIF,KAAK,KAAKI,OAAO,EAAE;QACrB;MAAA,CACD,MAAM,IAAII,eAAe,KAAKJ,OAAO,EAAE;QACtC;QACAhC,KAAK,CAACQ,aAAa,IAAI,CAAC;MAC1B,CAAC,MAAM;QACL;QACAR,KAAK,CAACQ,aAAa,GAAG,CAAC;MACzB;IACF,CAAC,MAAM;MACL;MACAR,KAAK,CAACQ,aAAa,GAAG,CAAC;IACzB;IAEAR,KAAK,CAACS,gBAAgB,GAAGmB,KAAK;EAChC;;EAEA;EACAf,SAAS,CAACb,KAAK,CAAC;EAChBgB,YAAY,CAACJ,QAAQ,CAAC;EAEtB,OAAO;IAAEZ,KAAK;IAAEY;EAAS,CAAC;AAC5B,CAAC;AAED,MAAMyB,YAAY,GAAG;EACnBtC,QAAQ;EACRY,WAAW;EACXM;AACF,CAAC;AAED,eAAeoB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}