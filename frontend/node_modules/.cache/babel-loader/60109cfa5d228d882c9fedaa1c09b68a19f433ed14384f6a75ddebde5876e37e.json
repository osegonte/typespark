{"ast":null,"code":"var _jsxFileName = \"/Users/osegonte/typespark/frontend/src/contexts/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(true); // Default to dark mode\n\n  // Load theme preference from localStorage on initial render\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    }\n  }, []);\n\n  // Update localStorage and apply theme when it changes\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n\n    // Apply theme to document\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n      document.body.style.backgroundColor = '#0f172a'; // dark-blue from our theme\n      document.body.style.color = '#FFFFFF'; // text-primary from our theme\n    } else {\n      document.documentElement.classList.remove('dark');\n      document.body.style.backgroundColor = '#FFFFFF';\n      document.body.style.color = '#1C1C1E'; // dark text for light mode\n    }\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"YOAWQZRLseyj1CECHtpxPgWaN24=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","setItem","document","documentElement","classList","add","body","style","backgroundColor","color","remove","toggleTheme","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["/Users/osegonte/typespark/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(true); // Default to dark mode\n\n  // Load theme preference from localStorage on initial render\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    }\n  }, []);\n\n  // Update localStorage and apply theme when it changes\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    \n    // Apply theme to document\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n      document.body.style.backgroundColor = '#0f172a'; // dark-blue from our theme\n      document.body.style.color = '#FFFFFF'; // text-primary from our theme\n    } else {\n      document.documentElement.classList.remove('dark');\n      document.body.style.backgroundColor = '#FFFFFF';\n      document.body.style.color = '#1C1C1E'; // dark text for light mode\n    }\n  }, [isDarkMode]);\n\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport default ThemeContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdD,aAAa,CAACC,UAAU,KAAK,MAAM,CAAC;IACtC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAV,SAAS,CAAC,MAAM;IACdW,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEL,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;;IAE5D;IACA,IAAIA,UAAU,EAAE;MACdM,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC9CH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,SAAS,CAAC,CAAC;MACjDN,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACE,KAAK,GAAG,SAAS,CAAC,CAAC;IACzC,CAAC,MAAM;MACLP,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACM,MAAM,CAAC,MAAM,CAAC;MACjDR,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,SAAS;MAC/CN,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACE,KAAK,GAAG,SAAS,CAAC,CAAC;IACzC;EACF,CAAC,EAAE,CAACb,UAAU,CAAC,CAAC;EAEhB,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBd,aAAa,CAACe,IAAI,IAAI,CAACA,IAAI,CAAC;EAC9B,CAAC;EAED,oBACErB,OAAA,CAACC,YAAY,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,UAAU;MAAEe;IAAY,CAAE;IAAAjB,QAAA,EACvDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACvB,EAAA,CApCWF,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAsC1B,OAAO,MAAM2B,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMhC,UAAU,CAACG,YAAY,CAAC;AAAA;AAAC6B,GAAA,CAA1CD,QAAQ;AAErB,eAAe5B,YAAY;AAAC,IAAA2B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}