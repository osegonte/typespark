{"ast":null,"code":"// Stats storage service using localStorage\nconst STORAGE_KEY='typespark_stats';const SESSIONS_KEY='typespark_sessions';// Get or initialize stats\nconst getStats=()=>{const stats=localStorage.getItem(STORAGE_KEY);if(stats){return JSON.parse(stats);}// Default stats\nreturn{averageWpm:0,accuracy:0,practiceTime:0,currentStreak:0,lastPracticeDate:null,totalItems:0};};// Get or initialize sessions\nconst getSessions=()=>{const sessions=localStorage.getItem(SESSIONS_KEY);if(sessions){return JSON.parse(sessions);}return[];};// Save stats\nconst saveStats=stats=>{localStorage.setItem(STORAGE_KEY,JSON.stringify(stats));};// Save sessions\nconst saveSessions=sessions=>{localStorage.setItem(SESSIONS_KEY,JSON.stringify(sessions));};// Record a new practice session\nconst recordSession=session=>{// Get current stats and sessions\nconst stats=getStats();const sessions=getSessions();// Add the new session\nsessions.unshift(session);// Add to beginning of array\n// Keep only the last 20 sessions\nif(sessions.length>20){sessions.length=20;}// Update stats\nconst totalSessions=sessions.length;if(totalSessions>0){stats.averageWpm=sessions.reduce((sum,s)=>sum+s.wpm,0)/totalSessions;stats.accuracy=sessions.reduce((sum,s)=>sum+s.accuracy,0)/totalSessions;stats.practiceTime+=session.duration/60;// Convert seconds to minutes\nstats.totalItems+=session.items||0;// Update streak\nconst today=new Date().toDateString();const lastDate=stats.lastPracticeDate;if(lastDate){// Convert to Date objects for comparison\nconst lastDay=new Date(lastDate).toDateString();const yesterday=new Date();yesterday.setDate(yesterday.getDate()-1);const yesterdayString=yesterday.toDateString();if(today===lastDay){// Already practiced today, streak unchanged\n}else if(yesterdayString===lastDay){// Practiced yesterday, streak continues\nstats.currentStreak+=1;}else{// Streak broken\nstats.currentStreak=1;}}else{// First practice\nstats.currentStreak=1;}stats.lastPracticeDate=today;}// Save updated data\nsaveStats(stats);saveSessions(sessions);return{stats,sessions};};const statsStorage={getStats,getSessions,recordSession};export default statsStorage;","map":{"version":3,"names":["STORAGE_KEY","SESSIONS_KEY","getStats","stats","localStorage","getItem","JSON","parse","averageWpm","accuracy","practiceTime","currentStreak","lastPracticeDate","totalItems","getSessions","sessions","saveStats","setItem","stringify","saveSessions","recordSession","session","unshift","length","totalSessions","reduce","sum","s","wpm","duration","items","today","Date","toDateString","lastDate","lastDay","yesterday","setDate","getDate","yesterdayString","statsStorage"],"sources":["/Users/osegonte/typespark/frontend/src/services/statsStorage.js"],"sourcesContent":["// Stats storage service using localStorage\nconst STORAGE_KEY = 'typespark_stats';\nconst SESSIONS_KEY = 'typespark_sessions';\n\n// Get or initialize stats\nconst getStats = () => {\n  const stats = localStorage.getItem(STORAGE_KEY);\n  if (stats) {\n    return JSON.parse(stats);\n  }\n  \n  // Default stats\n  return {\n    averageWpm: 0,\n    accuracy: 0,\n    practiceTime: 0,\n    currentStreak: 0,\n    lastPracticeDate: null,\n    totalItems: 0\n  };\n};\n\n// Get or initialize sessions\nconst getSessions = () => {\n  const sessions = localStorage.getItem(SESSIONS_KEY);\n  if (sessions) {\n    return JSON.parse(sessions);\n  }\n  \n  return [];\n};\n\n// Save stats\nconst saveStats = (stats) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(stats));\n};\n\n// Save sessions\nconst saveSessions = (sessions) => {\n  localStorage.setItem(SESSIONS_KEY, JSON.stringify(sessions));\n};\n\n// Record a new practice session\nconst recordSession = (session) => {\n  // Get current stats and sessions\n  const stats = getStats();\n  const sessions = getSessions();\n  \n  // Add the new session\n  sessions.unshift(session); // Add to beginning of array\n  \n  // Keep only the last 20 sessions\n  if (sessions.length > 20) {\n    sessions.length = 20;\n  }\n  \n  // Update stats\n  const totalSessions = sessions.length;\n  if (totalSessions > 0) {\n    stats.averageWpm = sessions.reduce((sum, s) => sum + s.wpm, 0) / totalSessions;\n    stats.accuracy = sessions.reduce((sum, s) => sum + s.accuracy, 0) / totalSessions;\n    stats.practiceTime += session.duration / 60; // Convert seconds to minutes\n    stats.totalItems += session.items || 0;\n    \n    // Update streak\n    const today = new Date().toDateString();\n    const lastDate = stats.lastPracticeDate;\n    \n    if (lastDate) {\n      // Convert to Date objects for comparison\n      const lastDay = new Date(lastDate).toDateString();\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayString = yesterday.toDateString();\n      \n      if (today === lastDay) {\n        // Already practiced today, streak unchanged\n      } else if (yesterdayString === lastDay) {\n        // Practiced yesterday, streak continues\n        stats.currentStreak += 1;\n      } else {\n        // Streak broken\n        stats.currentStreak = 1;\n      }\n    } else {\n      // First practice\n      stats.currentStreak = 1;\n    }\n    \n    stats.lastPracticeDate = today;\n  }\n  \n  // Save updated data\n  saveStats(stats);\n  saveSessions(sessions);\n  \n  return { stats, sessions };\n};\n\nconst statsStorage = {\n  getStats,\n  getSessions,\n  recordSession\n};\n\nexport default statsStorage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}